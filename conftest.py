# conftest.py
import os
import logging
import pytest
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from dotenv import load_dotenv


@pytest.fixture(scope="session")
def credentials():
    load_dotenv()
    login = os.getenv("STEPIC_LOGIN")
    password = os.getenv("STEPIC_PASSWORD")
    assert login and password, "STEPIC_LOGIN –∏–ª–∏ STEPIC_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env!"
    return {"login": login, "password": password}


# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("logs", exist_ok=True)

@pytest.hookimpl(tryfirst=True)
def pytest_runtest_setup(item):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    # ‚úÖ –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    import re
    safe_test_name = re.sub(r"[^\w\-_.]", "_", item.name)

    log_file = f"logs/{safe_test_name}_{timestamp}.log"

    logger = logging.getLogger("autotests")
    logger.setLevel(logging.INFO)

    if logger.hasHandlers():
        logger.handlers.clear()

    handler = logging.FileHandler(log_file, mode="w", encoding="utf-8")
    formatter = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s", "%H:%M:%S")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    logger.info(f"=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê: {item.name} ===")


@pytest.hookimpl(trylast=True)
def pytest_runtest_teardown(item, nextitem):
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞"""
    logger = logging.getLogger("autotests")
    logger.info(f"=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê: {item.name} ===")

    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã (–∏–Ω–∞—á–µ –±—É–¥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è)
    for handler in logger.handlers:
        handler.close()
    logger.handlers.clear()


@pytest.fixture(scope="session")
def logger():
    return logging.getLogger("autotests")

def pytest_addoption(parser):
    parser.addoption('--language', action='store', default=None,
                     help="–Ø–∑—ã–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru, en, de)")


@pytest.fixture(scope="function")
def browser(logger):
    user_language = "ru"

    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    options.add_argument("--incognito")
    options.add_argument("--headless")  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ä–µ–∂–∏–º –±–µ–∑ GUI
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument(f"--lang={user_language}")
    options.add_experimental_option('prefs', {'intl.accept_languages': user_language})

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    driver.delete_all_cookies()
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —è–∑—ã–∫–æ–º: {user_language}, –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ.")
    logger.info("–û—á–∏—â–µ–Ω—ã –≤—Å–µ cookies –≤ –±—Ä–∞—É–∑–µ—Ä–µ")

    yield driver

    logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä")
    driver.quit()
